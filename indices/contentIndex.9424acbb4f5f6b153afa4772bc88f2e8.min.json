{"/":{"title":"Hackers Blog","content":"\n# [$whoami](https://in.linkedin.com/in/sumir-broota)\n\u003e A person paranoid about cybersecurity and online privacy who is now making an effort to have an online presence.\n\n...If you're here you know my name is Sumir Broota. I am a cyber-security penetration tester and I enjoy building and breaking systems. Stick around to learn about [cyber security](/tags/Security) and see what projects I am working on.\n\nUPDATE 09/24:\nI really don't update this often - check out my [linkedin](https://in.linkedin.com/in/sumir-broota) \u0026 [breachforce.net](https://breachforce.net) to see some of the things am up to.\n\n## Blog:\n- ### [Security](/tags/Security)\n\n### Recently Published:\n- #### [Content Security Policy](notes/security/Content-Security-Policy)\n\u003cscript src=\"../../assets/js/latest.js\"\u003e \u003c/script\u003e\n\n### Want to connect ?\n### [Linkedin](https://in.linkedin.com/in/sumir-broota) \u0026nbsp; \u0026nbsp; \u0026nbsp; [GitHub](https://github.com/SumoSumir)\n\n### Found a vulnerability or CTF flag ?\n- \u003ca href=mailto:connect@sumirbroota.com target=\"_blank\" rel=\"noreferrer noopener\"\u003eEmail your POC here\u003c/a\u003e\n- [POC Format](notes/poc-format.md)\n- [Previously Found Flags/Vulns](notes/finding%20history.md)\n\u003e The CTF flag format is 'CTF-\\\u003capprox 32 character alphanumeric\\\u003e'\n\u003ca href=\"CTF-j2XHEnfhLSBr6sfcxy4Fga1gUmyry65i\" rel=\"easy flag\"\u003e\u003c/a\u003e\n\n","lastmodified":"2024-09-08T02:15:10.620333016Z","tags":["Home"]},"/notes/finding-history":{"title":"Finding History","content":"\n## CTF Flags\n### Flag 1: CTF-j2XHEnfhLSBr6sfcxy4Fga1gUmyry65i\n\nSeverity: Informational\n\nDescription: CTF flag found in source code of homepage\n\nPOC :\n1. Visit https://sumirbroota.com/ and click view source.\n2. Flag is exposed in the href of 'a' tag\n\u003cimg alt=\"Capture the flag (CTF-j2XHEnfhLSBr6sfcxy4Fga1gUmyry65i)\" src=\"../images/Flag1.webp\" width=\"auto\"\u003e\u003c/img\u003e\n\nAffected URL: https://sumirbroota.com/\n\nImpact: It may have no impact as the flag is exposed intentionally but may refer to a similar real world scenario where sensitive data is exposed.\n\nRecommendation: As this is an intentional exposure, but if referred to actual situations, sensitive data must not be exposed, preferably not in plaintext.\n\nFinding by: [Kapil Varma](https://www.linkedin.com/in/kapilvarmapsy/) \u003cbr\u003e\nCongrats on the win !!!","lastmodified":"2024-09-08T02:15:10.620333016Z","tags":[]},"/notes/poc-format":{"title":"POC Format","content":"\n## Title: CTF flag found\nThis is where you mention the name of the issue \u0026 if present mention CVE-ID for the same.\n\n## Severity:\nSeverity ranges from Critical to Informational. Use [this](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator) calculator to assign a CVSS score.\u003cbr\u003e\nAll CTF flag challenge issues are Informational severity\n\n## Description:\nHere you will explain the issue/CVE and how you found it. \n\n## POC Link:\nThis can be a google drive link or file attached in the mail. \u003cbr\u003e\nBe sure to expressly highlight the issue you're showcasing.\n\n## Affected URL/Resource:\nMention where you found this issue/flag, on which subdomain/domain/path.\n\n## Impact:\nBe sure to sell the impact of your finding. Marketing the risks help convice people to patch them faster.\n\n## Recommendation:\nWhat fix would you recommend for the said finding. In case of it being a flag, mention methods to remove it completely. \u003cbr\u003e\nBrownie points for those who research the tools/code and give indepth fixes.\n\n## Reference Link:\nIf any, mention your sources.\n\n","lastmodified":"2024-09-08T02:15:10.628333058Z","tags":[]},"/notes/security/Content-Security-Policy":{"title":"Content Security Policy (CSP)","content":"\n\u003clink rel=\"canonical\" href=\"https://breachforce.net/implementing-a-secure-content-security-policy-csp\" /\u003e\n\u003ca href=\"#tldr\"\u003e\n\u003ch3\u003e\n\u003cspan class=\"hanchor\" arialabel=\"Anchor\"\u003e# \u003c/span\u003e\n\u003ccode\u003eSkip to TLDR;?\u003c/code\u003e\n\u003c/h3\u003e\n\u003c/a\u003e\n\n## Introduction\n\nContent Security Policy (CSP) provides mechanisms for websites to restrict content that browsers will be allowed to load. It is the holy grail for client side web application security. A strong policy can provide monumental protection against threats such as Cross Site Scripting (XSS), Cross-Origin Resource Sharing (CORS), Click-jacking, HTTP Downgrade attacks and much more. This is because CSP employs the hardened security framework of the modern browser, baking it into the end users' web application.\n\n\u003ch3\u003e\u003cstrong\u003e\u003ccode\u003eHowever,\u003c/code\u003e\u003c/strong\u003e\u003c/h3\u003e \n\nthe resilience of CSP is often compromised during web development due to numerous gaps introduced by developers to support certain libraries/inline scripts/quick integrations etc.\n\u003cbr\u003e\n\n## Learning from Common Mistakes:\n```yaml {title=\"Example of an insecure CSP\"}\nContent-Security-Policy: default-src 'self’ \u003csource\u003e *; \nframe-src http://3rdparty.site \u003csource\u003e; \nscript-src *.google.com:80 \u003csource\u003e cdn.js unsafe-inline unsafe-eval;\n```\n[Not sure what frame-src or any other directives are ? - Click here](https://web.dev/csp/#policy-applies-to-a-wide-variety-of-resources)\n\n### \u003ccode\u003e Insecure default-src: \u003c/code\u003e\u003cbr\u003e\nThis is the policy the browser must refer to in case there is no specific one mentioned i.e the default case.\nHere although the scope of the default-src mentions 'self' (allowing only one's own website as the scope), the presence of '*' directs the browser to accept sources from anywhere. The use of such a broad scope can be very dangerous.\n\n### \u003ccode\u003e Lack of font-src, img-src, connect-src, media-src \u0026 more: \u003c/code\u003e\u003cbr\u003e\nThese additional policies have not been mentioned hence default-src would be used. Making the job of tightening the security of default-src paramount. The above policies are used in case you wish to make an exception for a particular src such as img-src, but don’t want to weaken the security of the default/other configurations. \n### \u003ccode\u003eAvoid 'unsafe-eval'/'unsafe-inline' \u003c/code\u003e\u003cbr\u003e\nUsing these in any directive is a HUGE risk and must be avoided. Just their mere presence introduces a vector for the execution of DOM based and inline XSS. Instead move the scripts into separate javascript files or use a [nonce/hash value](https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html#hashes)\n### \u003ccode\u003e Defining your \\\u003csource\\\u003e: \u003c/code\u003e\u003cbr\u003e\n##### 1. Define strict scope even for reputed first party sites\n- The use of *.google.com allows all of Google's [1120+ subdomains](https://gist.github.com/abuvanth/b9fcbaf7c77c2954f96c6e556138ffe8) to be used as a script source. You may still think of it as not a threat, but just to refresh your memory: Anyone can build a website on sites.google.com and it would fulfill the above regex requirements.\n \n##### 2. Be sure about adding 3rd party websites to your CSP\n- In case there is any vulnerability present in the 3rd party website, it could lead to an attack vector into your site as well.\n\n##### 3. Always think twice when adding '*' to a CSP regex:\n- The sources used in CSP must be precisely defined. Eg if you're accepting a legitimate javascript file from a CDN such as cdn.js, your source should not be cdn.js/* . This is problematic as many public cdn’s allow users to host their own javascript libraries. So an attacker could take advantage of the lax regex and call cdn.js/their-malicious.js. \u003cbr\u003e\n\n\n## Recommendation: \nIf Content Security Policy is not already present - implement it immediately. Content Security Policy can be set either in the response header or in the html's meta tag, the prior being given a higher priority. \u003cbr\u003e\n```yaml {title=\"Example of a Secure CSP\"}\nContent-Security-Policy: default-src 'self’; \nframe-src 'self'; \nscript-src 'self' https://cdn.jsdelivr.net/npm/@floating-ui/core@1.2.1;\nframe-ancestors ‘none’;\nreport-to csp-error;\nreport-uri https://sumirbroota.com/csp-violations\nupgrade-insecure-requests;\n```\n\n### \u003ccode\u003eframe-ancestors ‘none’: \u003c/code\u003e\nThis is a suitable setting in case one is not using an iframe in their sites functionality. frame-ancestors restricts the URLs that can embed the requested resource inside of \\\u003cframe\\\u003e, \\\u003ciframe\\\u003e, \\\u003cobject\\\u003e, \\\u003cembed\\\u003e, or \\\u003capplet\\\u003e elements.\n- If this directive is specified in a \\\u003cmeta\\\u003e tag, the directive is ignored.\n- This directive doesn't fallback to default-src directive.\n- X-Frame-Options is rendered obsolete by this directive and is ignored by the user agents.\n\n### \u003ccode\u003eupgrade-insecure-requests: \u003c/code\u003e\nThe following directive will ensure that all requests will be sent over HTTPS with no fallback to HTTP\n### \u003ccode\u003e report-to: \u003c/code\u003e\nReporting directives delivers violations of prevented behaviors to specified locations. To ensure backwards compatibility report-uri is also used.\n```yaml {title=\"Example Report-To header\"}\nReport-To: {\"group\":\"csp-error\",\"max_age\":180000,\"endpoints\":[{\"url\":\"https://sumirbroota.com/csp-violations\"}],\"include_subdomains\":true}\n```\n\n\u003e[!tldr]\n\u003e1. Be cautious of 3rd party urls \u0026 using '*' in even in trusted urls, if a direct url can be used, it would be best.\n\u003e2. Do not use 'unsafe-eval'/'unsafe-inline' instead use a [nonce or a hash value](https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html#hashes).\n\u003e3. default-src directive defines the default policy for fetching resources hence make sure it is airtight.\n\u003e4. Use other source directives if you wish to make an exception for a specific one but don't want to weaken the security of the other/default directives\n\u003e5. Avoid using the 'data' scheme as it can be used as a vector for XSS.\n\n## Language/Framework Specific Examples:\n\u003cbr\u003e\n\n```yaml {title=\"For Apache use:\"}\nHeader always set Content-Security-Policy \"default-src 'self';\"\n```\nin your /etc/apache2/sites-enabled/example.conf file. \u003cbr\u003e\u003cbr\u003e\n\n```yaml {title=\"For Nginx use:\"}\nadd_header Content-Security-Policy: \"default-src 'self’;\"; always;\n```\nin your server {} block of the /etc/nginx/sites-enabled/example.conf file. Here the always; option specifies to send the CSP no matter the response code. \u003cbr\u003e\u003cbr\u003e\n\nUse tools such as [SeeSPee](https://github.com/papandreou/seespee) to create a Content-Security-Policy for a website based on the statically detectable relations. *Note you will still have to validate it yourself*\n\u003cbr\u003e\u003cbr\u003e\n\n\u003csection id=\"tldr\"\u003e\u003c/section\u003e\n\n\u003e [!quote] TLDR;\n\u003e\n\u003e Content Security Policy (CSP) provides mechanisms to websites to restrict content that browsers will be allowed to load e.g. inline scripts, remote javascript files. CSP can be set either in the response header or in the html’s meta tag, the prior being given a higher priority. \u003cbr\u003e\u003cbr\u003e\n\u003e Recommendation: \n\u003e1. Be cautious of 3rd party urls \u0026 using '*' in even in trusted urls, if a direct url can be used, it would be best.\n\u003e2. Do not use 'unsafe-eval'/'unsafe-inline' instead use a [nonce or a hash value](https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html#hashes).\n\u003e3. default-src directive defines the default policy for fetching resources hence make sure it is airtight.\n\u003e4. Use other source directives if you wish to make an exception for a specific one but don't want to weaken the security of the other/default directives\n\u003e5. Avoid using the 'data' scheme as it can be used as a vector for XSS.\n\n\n## References: \n1. https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\n2. https://www.invicti.com/web-vulnerability-scanner/vulnerabilities/content-security-policy-csp-not-implemented/\n3. https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\n4. https://content-security-policy.com/examples/nginx/\n5. https://webdock.io/en/docs/how-guides/security-guides/how-to-configure-security-headers-in-nginx-and-apache","lastmodified":"2024-09-08T02:15:10.628333058Z","tags":["Security"]}}